    # Configuration file for the Sphinx documentation builder

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.getcwd())), 'src'))
sys.path.insert(0, os.path.abspath('../../'))

# -- Project information

project = 'auto-control-tools'
copyright = 'Copyright (c) 2023 luizn22'
author = 'Auto Control Tools Developers'

import src

release = '0.0.1'
version = '0.0.1'

# -- General configuration

extensions = [
    'sphinx.ext.autodoc',  # automatic documentation
    'sphinx.ext.intersphinx',  # links between different lib documentations
    'sphinx.ext.mathjax',  # support for latex math expressions rendered by javascript
    'sphinx.ext.autosummary',  # automatic documentation
    'sphinx.ext.napoleon',  # ease of docstring sintax
    'numpydoc',  # ease of docstring sintax
    'sphinx.ext.linkcode',  # link documentation to code repository
    'sphinx_paramlinks',  # allow param link references
    'sphinxcontrib.bibtex',  # support for bibtex
    "sphinx_rtd_dark_mode",  # add dark mode toggle
]

autoclass_content = "class"
# add_module_names = False

# scan documents for autosummary directives and generate stub pages for each.
autosummary_generate = True

# list of autodoc directive flags that should be automatically applied
# to all autodoc directives.
autodoc_default_options = {
    'members': True,
    'inherited-members': True,
    'exclude-members': '__init__, __weakref__, __repr__, __str__, _*',
    'class-doc-from': 'class',
    'class-doc-from-first': True,
}

autodoc_member_order = 'bysource'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'pt_BR'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store',
                    '*.ipynb_checkpoints']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# This config value contains the locations and names of other projects that
# should be linked to in this documentation.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'control': ('https://python-control.readthedocs.io/en/latest/', None),
    'sphinx': ('https://www.sphinx-doc.org/en/master/', None),
    'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),
    'sympy': ('https://docs.sympy.org/latest/', None),
    'numpy': ('https://numpy.org/doc/stable', None),
    'matplotlib': ('https://matplotlib.org/', None),
    'Ipython': ('https://ipython.readthedocs.io/en/stable/', None),
    'pandas': ('https://pandas.pydata.org/pandas-docs/stable/', None),
}

intersphinx_disabled_domains = ['std']

# bibtex settings
bibtex_bibfiles = ['bibliography.bib']
bibtex_default_style = 'unsrt'

# -- Options for HTML output

html_theme = 'sphinx_rtd_theme'
# -----------------------------------------------------------------------------
# Source code links (from numpy)
# -----------------------------------------------------------------------------

import inspect
from os.path import relpath, dirname


def linkcode_resolve(domain, info):
    """
    Determine the URL corresponding to Python object
    """
    if domain != 'py':
        return None

    modname = info['module']
    fullname = info['fullname']

    submod = sys.modules.get(modname)
    if submod is None:
        return None

    obj = submod
    for part in fullname.split('.'):
        try:
            obj = getattr(obj, part)
        except Exception:
            return None

    # strip decorators, which would resolve to the source of the decorator
    # possibly an upstream bug in getsourcefile, bpo-1764286
    try:
        unwrap = inspect.unwrap
    except AttributeError:
        pass
    else:
        obj = unwrap(obj)

    # Get the filename for the function
    try:
        fn = inspect.getsourcefile(obj)
    except Exception:
        fn = None
    if not fn:
        return None

    # Ignore re-exports as their source files are not within the numpy repo
    module = inspect.getmodule(obj)
    if module is not None and not module.__name__.startswith("auto_control_tools"):
        return None

    try:
        source, lineno = inspect.getsourcelines(obj)
    except Exception:
        lineno = None

    fn = relpath(fn, start=dirname(src.__file__))

    if lineno:
        linespec = "#L%d-L%d" % (lineno, lineno + len(source) - 1)
    else:
        linespec = ""

    base_url = "https://github.com/luizn22/auto-control-tools/blob/"
    if release != version:      # development release
        return base_url + "main/src/%s%s" % (fn, linespec)
    else:                       # specific version
        return base_url + "%s/src/%s%s" % (version, fn, linespec)


# Don't automaticall show all members of class in Methods & Attributes section
numpydoc_show_class_members = False

# Don't create a Sphinx TOC for the lists of class methods and attributes
numpydoc_class_members_toctree = False
# -- Options for LaTeX output ------------------------------------------------


# set default theme to light
default_dark_mode = False
